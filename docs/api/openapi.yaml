openapi: 3.0.3
info:
  title: SynC API (MVP Skeleton)
  version: 0.1.8
  description: REST-ish endpoints implemented via Netlify Functions with Supabase Auth.
servers:
  - url: https://tiny-bombolone-8f8acf.netlify.app
    description: Production
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string }
        full_name: { type: string }
        city: { type: string }
        interests:
          type: array
          items: { type: string }
    Business:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string }
        business_name: { type: string }
        address: { type: string }
        google_location_url: { type: string }
    StorefrontProduct:
      type: object
      properties:
        id: { type: string, format: uuid }
        product_name: { type: string }
        product_description: { type: string }
        product_image_url: { type: string }
        category: { type: string }
        subcategory_l1: { type: string }
        subcategory_l2: { type: string }
    Coupon:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        terms_and_conditions: { type: string }
        value: { type: number }
        start_date: { type: string, format: date }
        end_date: { type: string, format: date }
    UserCoupon:
      type: object
      properties:
        id: { type: string, format: uuid }
        coupon_id: { type: string, format: uuid }
        unique_code: { type: string }
        is_redeemed: { type: boolean }
    Ad:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        image_url: { type: string }
        cost_per_day: { type: number }
    RateLimitCounter:
      type: object
      properties:
        key: { type: string }
        window_start: { type: integer, description: Epoch seconds window start }
        count: { type: integer }
    RateLimitDiagnostics:
      type: object
      properties:
        ok: { type: boolean }
        message: { type: string, nullable: true }
        top_counters:
          type: array
          items: { $ref: '#/components/schemas/RateLimitCounter' }
    RevenueSummary:
      type: object
      properties:
        coupon_revenue: { type: number }
        banner_revenue: { type: number }
        search_revenue: { type: number }
        push_revenue: { type: number }
    ErrorResponse:
      type: object
      required: [ok, error]
      properties:
        ok: { type: boolean, example: false }
        error: { type: string }
        code: { type: string, nullable: true }
  headers:
    RateLimit-Limit:
      description: Maximum requests allowed in the current window
      schema: { type: integer }
    RateLimit-Remaining:
      description: Remaining requests in the current window
      schema: { type: integer }
    RateLimit-Reset:
      description: Epoch seconds when the current window resets
      schema: { type: integer }
paths:
  /api/auth/signup:
    post:
      summary: User signup (proxy to Supabase)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items: { type: array, items: { $ref: '#/components/schemas/Coupon' } }
                  total: { type: integer }
                  limit: { type: integer }
                  offset: { type: integer }
                  order: { type: string }
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/auth/login:
    post:
      summary: User login (proxy to Supabase)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/users/{userId}/profile/interests:
    put:
      security: [ { bearerAuth: [] } ]
      summary: Update user interests and city
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city: { type: string }
                interests:
                  type: array
                  items: { type: string }
            examples:
              example:
                value:
                  city: "San Jose"
                  interests: ["Food", "Books", "Outdoors"]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items: { type: array, items: { $ref: '#/components/schemas/UserCoupon' } }
                  total: { type: integer }
                  limit: { type: integer }
                  offset: { type: integer }
                  order: { type: string }
  /api/users/{userId}/dashboard:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Get personalized dashboard data
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/users/{userId}/favorites/business:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Add business to favorites
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                business_id: { type: string, format: uuid }
            examples:
              example:
                value:
                  business_id: "00000000-0000-4000-8000-000000000123"
      responses:
        '200': { description: OK }
  /api/users/{userId}/wishlist:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Add wishlist item (auto-categorized)
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_name: { type: string }
                item_description: { type: string }
            examples:
              example:
                value:
                  item_name: "Air Fryer"
                  item_description: "Compact 2L model with presets"
      responses:
        '200': { description: OK }
  /api/users/{userId}/wishlist/matches:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Get wishlist matches for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/users/{userId}/coupons/collect:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Collect coupon to wallet
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon_id: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/users/{userId}/coupons/{couponId}/share:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Share a coupon to a friend
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: couponId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver_user_id: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/users/{userId}/coupons/shared/{shareId}/cancel:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Cancel a pending share
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: shareId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/users/{userId}/checkin/gps:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Record a GPS check-in
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                business_id: { type: string, format: uuid }
                lat: { type: number }
                lng: { type: number }
            examples:
              example:
                value:
                  business_id: "00000000-0000-4000-8000-000000000321"
                  lat: 37.3349
                  lng: -121.8881
      responses:
        '200': { description: OK }
  /api/business/signup:
    post:
      summary: Business owner signup (proxy to Supabase)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: OK }
  /api/business/login:
    post:
      summary: Business owner login (proxy to Supabase)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: OK }
  /api/business/storefront:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Create or update storefront
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description: { type: string }
                theme: { type: string }
                is_open: { type: boolean }
      responses:
        '200': { description: OK }
    get:
      security: [ { bearerAuth: [] } ]
      summary: Get storefront for authenticated business
      responses:
        '200': { description: OK }
  /api/storefronts/{storefrontId}/products:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Add products to a storefront
      parameters:
        - in: path
          name: storefrontId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/StorefrontProduct'
      responses:
        '200': { description: OK }
    get:
      security: [ { bearerAuth: [] } ]
      summary: List products for a storefront
      parameters:
        - in: path
          name: storefrontId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
  /api/business/offers:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Create an offer (coupon template)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                terms_and_conditions: { type: string }
                value: { type: number }
                total_quantity: { type: integer }
                cost_per_coupon: { type: number }
                start_date: { type: string, format: date }
                end_date: { type: string, format: date }
      responses:
        '200': { description: OK }
    get:
      security: [ { bearerAuth: [] } ]
      summary: List offers (coupon templates) for owner businesses
      parameters:
        - in: query
          name: q
          required: false
          schema: { type: string }
          description: Case-insensitive search in title
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 200 }
          description: Max items to return (default 10)
        - in: query
          name: offset
          required: false
          schema: { type: integer, minimum: 0 }
          description: Offset for pagination (default 0)
        - in: query
          name: order
          required: false
          schema: { type: string, enum: ["title.asc","title.desc","start_date.asc","start_date.desc"] }
          description: Sort order (default start_date.desc)
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/business/offers/{offerId}/coupons:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Generate coupons for an offer
      parameters:
        - in: path
          name: offerId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_quantity: { type: integer }
                terms_and_conditions: { type: string }
            examples:
              example:
                value:
                  total_quantity: 250
                  terms_and_conditions: "Valid Mon–Thu only"
      responses:
        '200': { description: OK }
    get:
      security: [ { bearerAuth: [] } ]
      summary: List generated coupons for an offer (owner or platform)
      parameters:
        - in: path
          name: offerId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: q
          required: false
          schema: { type: string }
          description: Case-insensitive search in unique_code
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 500 }
          description: Max items to return (default 100)
        - in: query
          name: offset
          required: false
          schema: { type: integer, minimum: 0 }
          description: Offset for pagination (default 0)
        - in: query
          name: order
          required: false
          schema: { type: string, enum: ["unique_code.asc","unique_code.desc","is_redeemed.asc","is_redeemed.desc"] }
          description: Sort order (default unique_code.asc)
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/business/{businessId}/redeem:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Redeem a coupon at a business
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unique_code: { type: string }
            examples:
              example:
                value:
                  unique_code: "UC-cpn_123-1733855421000-42"
      responses:
        '200': { description: OK }
  /api/business/{businessId}/analytics/reviews:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Review summaries
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (owner or platform only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/business/{businessId}/reviews:
    get:
      security: [ { bearerAuth: [] } ]
      summary: List reviews for a business (owner/platform only)
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: order
          required: false
          schema: { type: string, enum: ["created_at.asc","created_at.desc","recommend_status.asc","recommend_status.desc"] }
          description: Sort order (default created_at.desc)
        - in: query
          name: recommend
          required: false
          schema: { type: string, enum: ["true","false"] }
          description: Optional filter; when true returns only positive reviews, when false only negative
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
          description: Max items to return (default 50)
        - in: query
          name: page
          required: false
          schema: { type: integer, minimum: 1 }
          description: Optional page number (1-based). When provided, `pageSize` controls size. Overrides `offset`.
        - in: query
          name: pageSize
          required: false
          schema: { type: integer, minimum: 1, maximum: 100 }
          description: Optional page size (default 50; 1–100). When used with `page` returns `pages`.
        - in: query
          name: offset
          required: false
          schema: { type: integer, minimum: 0 }
          description: Offset for pagination (default 0)
        - in: query
          name: created_gte
          required: false
          schema: { type: string, format: date-time }
          description: Filter reviews with `created_at` greater than or equal to this timestamp.
        - in: query
          name: created_lte
          required: false
          schema: { type: string, format: date-time }
          description: Filter reviews with `created_at` less than or equal to this timestamp.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        user_id: { type: string }
                        created_at: { type: string, format: date-time }
                        recommend_status: { type: boolean }
                        review_text: { type: string }
                  total: { type: integer }
                  limit: { type: integer }
                  offset: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
                  pages: { type: integer }
                  order: { type: string }
    post:
      security: [ { bearerAuth: [] } ]
      summary: Create a review for a business
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recommend_status: { type: boolean }
                review_text: { type: string }
                checked_in_at: { type: string, format: date-time }
      responses:
        '200': { description: OK }
  /api/business/{businessId}/analytics/coupons:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Coupon utilization summaries
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (owner or platform only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/business/analytics/trends:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Peer and marketing trends
      parameters:
        - in: query
          name: group
          required: false
          schema: { type: string, enum: [business] }
          description: When set to `business`, returns trends bucketed by business in `trendsByBusiness`.
        - in: query
          name: businessId
          required: false
          schema: { type: string, format: uuid }
          description: Optional filter to constrain results to a single business (owner or platform only).
        - in: query
          name: sinceDays
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 365
          description: Optional rolling window in days (default 7; clamped to 1–365). When fill=true, must be <= 180.
        - in: query
          name: tz
          required: false
          schema: { type: string }
          description: Optional IANA timezone for bucketing; if omitted, uses UTC boundaries. Returns 400 when invalid.
        - in: query
          name: fill
          required: false
          schema: { type: string, enum: ["true","false"] }
          description: When `false`, disables zero-fill of missing days for smaller payloads (default `true`).
      responses:
        '400':
          description: Bad Request (range exceeds cap when fill=true or invalid tz)
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/business/analytics/funnel:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Coupon conversion funnel
      parameters:
        - in: query
          name: group
          required: false
          schema: { type: string, enum: [business] }
          description: When set to `business`, returns `funnelByBusiness` map.
        - in: query
          name: businessId
          required: false
          schema: { type: string, format: uuid }
          description: Optional filter to constrain to a single business (owner or platform only).
        - in: query
          name: sinceDays
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 365
          description: Optional rolling window in days (default 7; clamped to 1–365). When fill=true, must be <= 180.
        - in: query
          name: tz
          required: false
          schema: { type: string }
          description: Optional IANA timezone; affects `funnelByDay` bucketing. Returns 400 when invalid.
        - in: query
          name: fill
          required: false
          schema: { type: string, enum: ["true","false"] }
          description: When `false`, disables zero-fill of missing days in `funnelByDay` (default `true`).
      responses:
        '400':
          description: Bad Request (range exceeds cap when fill=true)
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
  /api/business/coupons/issue-targeted:
    post:
      security: [ { bearerAuth: [] } ]
      summary: Issue targeted coupons based on parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon_id: { type: string, format: uuid, description: Optional coupon (offer) id to issue to targeted users }
                target_parameters: { type: object }
      responses:
        '200': { description: OK }
  /api/business/ads:
  /api/business/analytics/reviews-summary:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Reviews summary by day
      parameters:
        - in: query
          name: businessId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: sinceDays
          required: false
          schema: { type: integer, minimum: 1, maximum: 365 }
          description: Optional rolling window in days (default 30; clamped to 1–365). When fill=true, must be <= 180.
        - in: query
          name: tz
          required: false
          schema: { type: string }
          description: Optional IANA timezone for bucketing; returns 400 when invalid.
        - in: query
          name: fill
          required: false
          schema: { type: string, enum: ["true","false"] }
          description: When `false`, disables zero-fill of missing days (default `true`).
        - in: query
          name: format
          required: false
          schema: { type: string, enum: [csv] }
          description: When `csv`, returns `text/csv`.
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request (range exceeds cap when fill=true or invalid tz)
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (owner or platform only)
    post:
      security: [ { bearerAuth: [] } ]
      summary: Create a banner ad
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ad'
      responses:
        '201': { description: Created }
  /api/business/analytics/coupons-issued:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Coupons issued by day
      parameters:
        - in: query
          name: businessId
          required: false
          schema: { type: string, format: uuid }
          description: Required unless group=business and caller is platform owner.
        - in: query
          name: group
          required: false
          schema: { type: string, enum: [business] }
          description: Group result by business (platform owner only when omitting businessId).
        - in: query
          name: sinceDays
          required: false
          schema: { type: integer, minimum: 1, maximum: 365 }
          description: Optional rolling window in days (default 30; clamped to 1–365). When fill=true, must be <= 180.
        - in: query
          name: tz
          required: false
          schema: { type: string }
          description: Optional IANA timezone; returns 400 when invalid.
        - in: query
          name: fill
          required: false
          schema: { type: string, enum: ["true","false"] }
          description: When `false`, disables zero-fill of missing days (default `true`).
        - in: query
          name: format
          required: false
          schema: { type: string, enum: [csv] }
          description: When `csv`, returns text/csv.
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

      

  /api/platform/revenue:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Platform revenue summary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueSummary'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (owner only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/platform/ratelimit:
    get:
      security: [ { bearerAuth: [] } ]
      summary: Inspect shared rate limit counters (owner only)
      description: |
        Returns top rate limit counters when FEATURE_SHARED_RATELIMIT is enabled; otherwise returns a message indicating the feature is disabled.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitDiagnostics'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (owner only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/platform/health:
    get:
      summary: Platform health and feature flags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  version: { type: string }
                  time: { type: string, format: date-time }
                  features:
                    type: object
                    properties:
                      FEATURE_SUPABASE_AUTH: { type: boolean }
                      FEATURE_DEV_AUTH: { type: boolean }
                      FEATURE_SHARED_RATELIMIT: { type: boolean }
  /api/platform/config/pricing:
    put:
      security: [ { bearerAuth: [] } ]
      summary: Update pricing configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
            examples:
              simple:
                value:
                  plans:
                    basic: { price: 0 }
                    pro: { price: 29 }
      responses:
        '200': { description: OK }

  /api/platform/config:
    get:
      summary: Read platform configuration (merged with defaults)
      responses:
        '200': { description: OK }

  /api/platform/config/runtime:
    put:
      security: [ { bearerAuth: [] } ]
      summary: Update platform runtime configuration (whitelisted keys only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                billing.mode:
                  type: object
                  properties: { value: { type: string } }
                billing.threshold:
                  type: object
                  properties: { value: { type: number } }
                notifications.promotions_per_hour:
                  type: object
                  properties: { value: { type: number } }
                notifications.promotions_per_day:
                  type: object
                  properties: { value: { type: number } }
                notifications.quiet_hours:
                  type: object
                  properties: { value: { type: string } }
                coupon_sharing.cap_per_user_per_day:
                  type: object
                  properties: { value: { type: number } }
                ads.carousel_slots:
                  type: object
                  properties: { value: { type: number } }
                ads.rotation_sec:
                  type: object
                  properties: { value: { type: number } }
            examples:
              example:
                value:
                  billing.mode: { value: "dummy" }
                  notifications.promotions_per_hour: { value: 3 }
      responses:
        '200': { description: OK }

  /api/users/{userId}/notifications:
    get:
      security: [ { bearerAuth: [] } ]
      summary: List notifications for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Max items to return (default 50; 1–100)
        - in: query
          name: offset
          required: false
          schema: { type: integer, minimum: 0 }
          description: Offset for pagination (default 0)
        - in: query
          name: unread
          required: false
          schema: { type: boolean }
          description: When true, returns only unread notifications
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
    delete:
      security: [ { bearerAuth: [] } ]
      summary: Clear all notifications for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }

  /api/users/{userId}/notifications/read:
    put:
      security: [ { bearerAuth: [] } ]
      summary: Mark all notifications as read for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }

  /api/users/{userId}/notifications/{notificationId}/read:
    put:
      security: [ { bearerAuth: [] } ]
      summary: Mark a single notification as read
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: notificationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            Retry-After:
              description: Seconds until the next allowed request
              schema: { type: integer }
