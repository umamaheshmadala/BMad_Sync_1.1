
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// packages/shared/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
function readEnv(name) {
  try {
    if (typeof Netlify !== "undefined" && Netlify?.env?.get) {
      const v = Netlify.env.get(name);
      if (v)
        return v;
    }
  } catch {
  }
  return globalThis?.process?.env?.[name];
}
function createSupabaseClient(useServiceRole = false) {
  const url = readEnv("SUPABASE_URL");
  const anon = readEnv("SUPABASE_ANON_KEY");
  const service = readEnv("SUPABASE_SERVICE_ROLE_KEY");
  if (!url || !anon && !service) {
    throw new Error("Supabase env vars not set (SUPABASE_URL and key).");
  }
  const key = useServiceRole && service ? service : anon;
  return createClient(url, key, {
    auth: { persistSession: false }
  });
}

// apps/api/functions/users-coupons-share-post.ts
var users_coupons_share_post_default = async (req) => {
  if (req.method !== "POST")
    return new Response("Method Not Allowed", { status: 405 });
  const url = new URL(req.url);
  const segments = url.pathname.split("/");
  const userId = segments[3] || "";
  const couponId = segments[5] || "";
  try {
    const body = await req.json();
    const { receiver_user_id } = body || {};
    if (!userId || !couponId || typeof receiver_user_id !== "string") {
      return new Response(JSON.stringify({ ok: false, error: "Invalid payload" }), { status: 400 });
    }
    const supabase = createSupabaseClient(true);
    const { data: originalUC, error: origErr } = await supabase.from("user_coupons").select("id, is_redeemed, transfer_count").eq("coupon_id", couponId).eq("current_owner_id", userId).limit(1).maybeSingle();
    if (origErr || !originalUC) {
      return new Response(JSON.stringify({ ok: false, error: "Original coupon not owned by user" }), { status: 403 });
    }
    if (originalUC.is_redeemed) {
      return new Response(JSON.stringify({ ok: false, error: "Already redeemed; cannot share" }), { status: 409 });
    }
    const unique_code = `UC-${couponId}-${Date.now()}-${Math.floor(Math.random() * 1e3)}`;
    const { data: newUC, error: insErr } = await supabase.from("user_coupons").insert({ coupon_id: couponId, user_id: receiver_user_id, unique_code, current_owner_id: receiver_user_id }).select("id").single();
    if (insErr)
      return new Response(JSON.stringify({ ok: false, error: insErr.message }), { status: 500 });
    const { data: shareRow, error: shareErr } = await supabase.from("coupon_shares").insert({
      original_user_coupon_id: originalUC.id,
      sharer_user_id: userId,
      receiver_user_id,
      shared_coupon_instance_id: newUC.id
    }).select("id").single();
    if (shareErr)
      return new Response(JSON.stringify({ ok: false, error: shareErr.message }), { status: 500 });
    const { error: updErr } = await supabase.from("user_coupons").update({ current_owner_id: null, transfer_count: (originalUC.transfer_count || 0) + 1 }).eq("id", originalUC.id);
    if (updErr)
      return new Response(JSON.stringify({ ok: false, error: updErr.message }), { status: 500 });
    return new Response(
      JSON.stringify({ ok: true, share_id: shareRow.id, new_user_coupon_id: newUC.id, unique_code }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (e) {
    return new Response(JSON.stringify({ ok: false, error: e?.message || "Bad Request" }), { status: 400 });
  }
};
var config = {
  path: "/api/users/:userId/coupons/:couponId/share"
};
export {
  config,
  users_coupons_share_post_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGFja2FnZXMvc2hhcmVkL3N1cGFiYXNlQ2xpZW50LnRzIiwgImFwcHMvYXBpL2Z1bmN0aW9ucy91c2Vycy1jb3Vwb25zLXNoYXJlLXBvc3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIFN1cGFiYXNlIGNsaWVudCBmYWN0b3J5XHJcbi8vIFJlYWRzIGVudiBmcm9tIE5ldGxpZnkgKE5ldGxpZnkuZW52KSBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBwcm9jZXNzLmVudlxyXG5cclxuaW1wb3J0IHR5cGUgeyBTdXBhYmFzZUNsaWVudCBhcyBTdXBhYmFzZUpzQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuXHJcbmZ1bmN0aW9uIHJlYWRFbnYobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICB0cnkge1xyXG4gICAgLy8gQHRzLWlnbm9yZSAtIE5ldGxpZnkgZ2xvYmFsIG1heSBleGlzdCBhdCBydW50aW1lXHJcbiAgICBpZiAodHlwZW9mIE5ldGxpZnkgIT09ICd1bmRlZmluZWQnICYmIE5ldGxpZnk/LmVudj8uZ2V0KSB7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgY29uc3QgdiA9IE5ldGxpZnkuZW52LmdldChuYW1lKTtcclxuICAgICAgaWYgKHYpIHJldHVybiB2IGFzIHN0cmluZztcclxuICAgIH1cclxuICB9IGNhdGNoIHt9XHJcbiAgLy8gRmFsbGJhY2tcclxuICAvLyBAdHMtaWdub3JlXHJcbiAgcmV0dXJuIChnbG9iYWxUaGlzIGFzIGFueSk/LnByb2Nlc3M/LmVudj8uW25hbWVdIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1cGFiYXNlQ2xpZW50KHVzZVNlcnZpY2VSb2xlID0gZmFsc2UpOiBTdXBhYmFzZUpzQ2xpZW50IHtcclxuICBjb25zdCB1cmwgPSByZWFkRW52KCdTVVBBQkFTRV9VUkwnKTtcclxuICBjb25zdCBhbm9uID0gcmVhZEVudignU1VQQUJBU0VfQU5PTl9LRVknKTtcclxuICBjb25zdCBzZXJ2aWNlID0gcmVhZEVudignU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWScpO1xyXG4gIGlmICghdXJsIHx8ICghYW5vbiAmJiAhc2VydmljZSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2UgZW52IHZhcnMgbm90IHNldCAoU1VQQUJBU0VfVVJMIGFuZCBrZXkpLicpO1xyXG4gIH1cclxuICBjb25zdCBrZXkgPSB1c2VTZXJ2aWNlUm9sZSAmJiBzZXJ2aWNlID8gc2VydmljZSA6IChhbm9uIGFzIHN0cmluZyk7XHJcbiAgcmV0dXJuIGNyZWF0ZUNsaWVudCh1cmwsIGtleSwge1xyXG4gICAgYXV0aDogeyBwZXJzaXN0U2Vzc2lvbjogZmFsc2UgfSxcclxuICB9KTtcclxufVxyXG4iLCAiaW1wb3J0IHsgY3JlYXRlU3VwYWJhc2VDbGllbnQgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9zaGFyZWQvc3VwYWJhc2VDbGllbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHJlcTogUmVxdWVzdCkgPT4ge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHJldHVybiBuZXcgUmVzcG9uc2UoJ01ldGhvZCBOb3QgQWxsb3dlZCcsIHsgc3RhdHVzOiA0MDUgfSk7XHJcbiAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcclxuICBjb25zdCBzZWdtZW50cyA9IHVybC5wYXRobmFtZS5zcGxpdCgnLycpO1xyXG4gIGNvbnN0IHVzZXJJZCA9IHNlZ21lbnRzWzNdIHx8ICcnO1xyXG4gIGNvbnN0IGNvdXBvbklkID0gc2VnbWVudHNbNV0gfHwgJyc7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xyXG4gICAgY29uc3QgeyByZWNlaXZlcl91c2VyX2lkIH0gPSBib2R5IHx8IHt9O1xyXG4gICAgaWYgKCF1c2VySWQgfHwgIWNvdXBvbklkIHx8IHR5cGVvZiByZWNlaXZlcl91c2VyX2lkICE9PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgcGF5bG9hZCcgfSksIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVN1cGFiYXNlQ2xpZW50KHRydWUpO1xyXG5cclxuICAgIC8vIFZhbGlkYXRlIG9yaWdpbmFsIG93bmVyc2hpcFxyXG4gICAgY29uc3QgeyBkYXRhOiBvcmlnaW5hbFVDLCBlcnJvcjogb3JpZ0VyciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3VzZXJfY291cG9ucycpXHJcbiAgICAgIC5zZWxlY3QoJ2lkLCBpc19yZWRlZW1lZCwgdHJhbnNmZXJfY291bnQnKVxyXG4gICAgICAuZXEoJ2NvdXBvbl9pZCcsIGNvdXBvbklkKVxyXG4gICAgICAuZXEoJ2N1cnJlbnRfb3duZXJfaWQnLCB1c2VySWQpXHJcbiAgICAgIC5saW1pdCgxKVxyXG4gICAgICAubWF5YmVTaW5nbGUoKTtcclxuICAgIGlmIChvcmlnRXJyIHx8ICFvcmlnaW5hbFVDKSB7XHJcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiAnT3JpZ2luYWwgY291cG9uIG5vdCBvd25lZCBieSB1c2VyJyB9KSwgeyBzdGF0dXM6IDQwMyB9KTtcclxuICAgIH1cclxuICAgIGlmIChvcmlnaW5hbFVDLmlzX3JlZGVlbWVkKSB7XHJcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiAnQWxyZWFkeSByZWRlZW1lZDsgY2Fubm90IHNoYXJlJyB9KSwgeyBzdGF0dXM6IDQwOSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlIGZvciByZWNlaXZlclxyXG4gICAgY29uc3QgdW5pcXVlX2NvZGUgPSBgVUMtJHtjb3Vwb25JZH0tJHtEYXRlLm5vdygpfS0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApfWA7XHJcbiAgICBjb25zdCB7IGRhdGE6IG5ld1VDLCBlcnJvcjogaW5zRXJyIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9jb3Vwb25zJylcclxuICAgICAgLmluc2VydCh7IGNvdXBvbl9pZDogY291cG9uSWQsIHVzZXJfaWQ6IHJlY2VpdmVyX3VzZXJfaWQsIHVuaXF1ZV9jb2RlLCBjdXJyZW50X293bmVyX2lkOiByZWNlaXZlcl91c2VyX2lkIH0pXHJcbiAgICAgIC5zZWxlY3QoJ2lkJylcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgaWYgKGluc0VycikgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IG9rOiBmYWxzZSwgZXJyb3I6IGluc0Vyci5tZXNzYWdlIH0pLCB7IHN0YXR1czogNTAwIH0pO1xyXG5cclxuICAgIC8vIFJlY29yZCBzaGFyZSByb3dcclxuICAgIGNvbnN0IHsgZGF0YTogc2hhcmVSb3csIGVycm9yOiBzaGFyZUVyciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ2NvdXBvbl9zaGFyZXMnKVxyXG4gICAgICAuaW5zZXJ0KHtcclxuICAgICAgICBvcmlnaW5hbF91c2VyX2NvdXBvbl9pZDogb3JpZ2luYWxVQy5pZCxcclxuICAgICAgICBzaGFyZXJfdXNlcl9pZDogdXNlcklkLFxyXG4gICAgICAgIHJlY2VpdmVyX3VzZXJfaWQsXHJcbiAgICAgICAgc2hhcmVkX2NvdXBvbl9pbnN0YW5jZV9pZDogbmV3VUMuaWQsXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zZWxlY3QoJ2lkJylcclxuICAgICAgLnNpbmdsZSgpO1xyXG4gICAgaWYgKHNoYXJlRXJyKSByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogc2hhcmVFcnIubWVzc2FnZSB9KSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgb3JpZ2luYWwgdHJhbnNmZXJfY291bnQgYW5kIG51bGxpZnkgY3VycmVudCBvd25lcnNoaXBcclxuICAgIGNvbnN0IHsgZXJyb3I6IHVwZEVyciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3VzZXJfY291cG9ucycpXHJcbiAgICAgIC51cGRhdGUoeyBjdXJyZW50X293bmVyX2lkOiBudWxsLCB0cmFuc2Zlcl9jb3VudDogKG9yaWdpbmFsVUMudHJhbnNmZXJfY291bnQgfHwgMCkgKyAxIH0pXHJcbiAgICAgIC5lcSgnaWQnLCBvcmlnaW5hbFVDLmlkKTtcclxuICAgIGlmICh1cGRFcnIpIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiB1cGRFcnIubWVzc2FnZSB9KSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFxyXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IG9rOiB0cnVlLCBzaGFyZV9pZDogc2hhcmVSb3cuaWQsIG5ld191c2VyX2NvdXBvbl9pZDogbmV3VUMuaWQsIHVuaXF1ZV9jb2RlIH0pLFxyXG4gICAgICB7IGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9IH1cclxuICAgICk7XHJcbiAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogZT8ubWVzc2FnZSB8fCAnQmFkIFJlcXVlc3QnIH0pLCB7IHN0YXR1czogNDAwIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XHJcbiAgcGF0aDogJy9hcGkvdXNlcnMvOnVzZXJJZC9jb3Vwb25zLzpjb3Vwb25JZC9zaGFyZScsXHJcbn07XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7QUFJQSxTQUFTLG9CQUFvQjtBQUU3QixTQUFTLFFBQVEsTUFBa0M7QUFDakQsTUFBSTtBQUVGLFFBQUksT0FBTyxZQUFZLGVBQWUsU0FBUyxLQUFLLEtBQUs7QUFFdkQsWUFBTSxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUk7QUFDOUIsVUFBSTtBQUFHLGVBQU87QUFBQSxJQUNoQjtBQUFBLEVBQ0YsUUFBUTtBQUFBLEVBQUM7QUFHVCxTQUFRLFlBQW9CLFNBQVMsTUFBTSxJQUFJO0FBQ2pEO0FBRU8sU0FBUyxxQkFBcUIsaUJBQWlCLE9BQXlCO0FBQzdFLFFBQU0sTUFBTSxRQUFRLGNBQWM7QUFDbEMsUUFBTSxPQUFPLFFBQVEsbUJBQW1CO0FBQ3hDLFFBQU0sVUFBVSxRQUFRLDJCQUEyQjtBQUNuRCxNQUFJLENBQUMsT0FBUSxDQUFDLFFBQVEsQ0FBQyxTQUFVO0FBQy9CLFVBQU0sSUFBSSxNQUFNLG1EQUFtRDtBQUFBLEVBQ3JFO0FBQ0EsUUFBTSxNQUFNLGtCQUFrQixVQUFVLFVBQVc7QUFDbkQsU0FBTyxhQUFhLEtBQUssS0FBSztBQUFBLElBQzVCLE1BQU0sRUFBRSxnQkFBZ0IsTUFBTTtBQUFBLEVBQ2hDLENBQUM7QUFDSDs7O0FDN0JBLElBQU8sbUNBQVEsT0FBTyxRQUFpQjtBQUNyQyxNQUFJLElBQUksV0FBVztBQUFRLFdBQU8sSUFBSSxTQUFTLHNCQUFzQixFQUFFLFFBQVEsSUFBSSxDQUFDO0FBQ3BGLFFBQU0sTUFBTSxJQUFJLElBQUksSUFBSSxHQUFHO0FBQzNCLFFBQU0sV0FBVyxJQUFJLFNBQVMsTUFBTSxHQUFHO0FBQ3ZDLFFBQU0sU0FBUyxTQUFTLENBQUMsS0FBSztBQUM5QixRQUFNLFdBQVcsU0FBUyxDQUFDLEtBQUs7QUFDaEMsTUFBSTtBQUNGLFVBQU0sT0FBTyxNQUFNLElBQUksS0FBSztBQUM1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
