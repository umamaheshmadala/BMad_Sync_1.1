
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// packages/shared/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
function readEnv(name) {
  try {
    if (typeof Netlify !== "undefined" && Netlify?.env?.get) {
      const v = Netlify.env.get(name);
      if (v)
        return v;
    }
  } catch {
  }
  return globalThis?.process?.env?.[name];
}
function createSupabaseClient(useServiceRole = false) {
  const url = readEnv("SUPABASE_URL");
  const anon = readEnv("SUPABASE_ANON_KEY");
  const service = readEnv("SUPABASE_SERVICE_ROLE_KEY");
  if (!url || !anon && !service) {
    throw new Error("Supabase env vars not set (SUPABASE_URL and key).");
  }
  const key = useServiceRole && service ? service : anon;
  return createClient(url, key, {
    auth: { persistSession: false }
  });
}

// apps/api/functions/users-coupons-collect-post.ts
var users_coupons_collect_post_default = async (req) => {
  if (req.method !== "POST")
    return new Response("Method Not Allowed", { status: 405 });
  const url = new URL(req.url);
  const parts = url.pathname.split("/");
  const userId = parts[3] || "";
  try {
    const body = await req.json();
    const { coupon_id } = body || {};
    if (!userId || typeof coupon_id !== "string") {
      return new Response(JSON.stringify({ ok: false, error: "Invalid payload" }), { status: 400 });
    }
    const supabase = createSupabaseClient(true);
    const unique_code = `UC-${coupon_id}-${Date.now()}`;
    const { error } = await supabase.from("user_coupons").insert({ coupon_id, user_id: userId, unique_code, current_owner_id: userId });
    if (error)
      return new Response(JSON.stringify({ ok: false, error: error.message }), { status: 500 });
    return new Response(JSON.stringify({ ok: true, userId, coupon_id, unique_code }), {
      headers: { "Content-Type": "application/json" }
    });
  } catch (e) {
    return new Response(JSON.stringify({ ok: false, error: e?.message || "Bad Request" }), { status: 400 });
  }
};
var config = {
  path: "/api/users/:userId/coupons/collect"
};
export {
  config,
  users_coupons_collect_post_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGFja2FnZXMvc2hhcmVkL3N1cGFiYXNlQ2xpZW50LnRzIiwgImFwcHMvYXBpL2Z1bmN0aW9ucy91c2Vycy1jb3Vwb25zLWNvbGxlY3QtcG9zdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gU3VwYWJhc2UgY2xpZW50IGZhY3RvcnlcclxuLy8gUmVhZHMgZW52IGZyb20gTmV0bGlmeSAoTmV0bGlmeS5lbnYpIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIHByb2Nlc3MuZW52XHJcblxyXG5pbXBvcnQgdHlwZSB7IFN1cGFiYXNlQ2xpZW50IGFzIFN1cGFiYXNlSnNDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5cclxuZnVuY3Rpb24gcmVhZEVudihuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBAdHMtaWdub3JlIC0gTmV0bGlmeSBnbG9iYWwgbWF5IGV4aXN0IGF0IHJ1bnRpbWVcclxuICAgIGlmICh0eXBlb2YgTmV0bGlmeSAhPT0gJ3VuZGVmaW5lZCcgJiYgTmV0bGlmeT8uZW52Py5nZXQpIHtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICBjb25zdCB2ID0gTmV0bGlmeS5lbnYuZ2V0KG5hbWUpO1xyXG4gICAgICBpZiAodikgcmV0dXJuIHYgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2gge31cclxuICAvLyBGYWxsYmFja1xyXG4gIC8vIEB0cy1pZ25vcmVcclxuICByZXR1cm4gKGdsb2JhbFRoaXMgYXMgYW55KT8ucHJvY2Vzcz8uZW52Py5bbmFtZV0gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VwYWJhc2VDbGllbnQodXNlU2VydmljZVJvbGUgPSBmYWxzZSk6IFN1cGFiYXNlSnNDbGllbnQge1xyXG4gIGNvbnN0IHVybCA9IHJlYWRFbnYoJ1NVUEFCQVNFX1VSTCcpO1xyXG4gIGNvbnN0IGFub24gPSByZWFkRW52KCdTVVBBQkFTRV9BTk9OX0tFWScpO1xyXG4gIGNvbnN0IHNlcnZpY2UgPSByZWFkRW52KCdTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZJyk7XHJcbiAgaWYgKCF1cmwgfHwgKCFhbm9uICYmICFzZXJ2aWNlKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTdXBhYmFzZSBlbnYgdmFycyBub3Qgc2V0IChTVVBBQkFTRV9VUkwgYW5kIGtleSkuJyk7XHJcbiAgfVxyXG4gIGNvbnN0IGtleSA9IHVzZVNlcnZpY2VSb2xlICYmIHNlcnZpY2UgPyBzZXJ2aWNlIDogKGFub24gYXMgc3RyaW5nKTtcclxuICByZXR1cm4gY3JlYXRlQ2xpZW50KHVybCwga2V5LCB7XHJcbiAgICBhdXRoOiB7IHBlcnNpc3RTZXNzaW9uOiBmYWxzZSB9LFxyXG4gIH0pO1xyXG59XHJcbiIsICJpbXBvcnQgeyBjcmVhdGVTdXBhYmFzZUNsaWVudCB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3NoYXJlZC9zdXBhYmFzZUNsaWVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyAocmVxOiBSZXF1ZXN0KSA9PiB7XHJcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykgcmV0dXJuIG5ldyBSZXNwb25zZSgnTWV0aG9kIE5vdCBBbGxvd2VkJywgeyBzdGF0dXM6IDQwNSB9KTtcclxuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcS51cmwpO1xyXG4gIGNvbnN0IHBhcnRzID0gdXJsLnBhdGhuYW1lLnNwbGl0KCcvJyk7XHJcbiAgY29uc3QgdXNlcklkID0gcGFydHNbM10gfHwgJyc7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xyXG4gICAgY29uc3QgeyBjb3Vwb25faWQgfSA9IGJvZHkgfHwge307XHJcbiAgICBpZiAoIXVzZXJJZCB8fCB0eXBlb2YgY291cG9uX2lkICE9PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgcGF5bG9hZCcgfSksIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVN1cGFiYXNlQ2xpZW50KHRydWUpO1xyXG4gICAgLy8gR2VuZXJhdGUgYSBzaW1wbGUgdW5pcXVlIGNvZGVcclxuICAgIGNvbnN0IHVuaXF1ZV9jb2RlID0gYFVDLSR7Y291cG9uX2lkfS0ke0RhdGUubm93KCl9YDtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX2NvdXBvbnMnKVxyXG4gICAgICAuaW5zZXJ0KHsgY291cG9uX2lkLCB1c2VyX2lkOiB1c2VySWQsIHVuaXF1ZV9jb2RlLCBjdXJyZW50X293bmVyX2lkOiB1c2VySWQgfSk7XHJcbiAgICBpZiAoZXJyb3IpIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pLCB7IHN0YXR1czogNTAwIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IG9rOiB0cnVlLCB1c2VySWQsIGNvdXBvbl9pZCwgdW5pcXVlX2NvZGUgfSksIHtcclxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiBlPy5tZXNzYWdlIHx8ICdCYWQgUmVxdWVzdCcgfSksIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBwYXRoOiAnL2FwaS91c2Vycy86dXNlcklkL2NvdXBvbnMvY29sbGVjdCcsXHJcbn07XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7QUFJQSxTQUFTLG9CQUFvQjtBQUU3QixTQUFTLFFBQVEsTUFBa0M7QUFDakQsTUFBSTtBQUVGLFFBQUksT0FBTyxZQUFZLGVBQWUsU0FBUyxLQUFLLEtBQUs7QUFFdkQsWUFBTSxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUk7QUFDOUIsVUFBSTtBQUFHLGVBQU87QUFBQSxJQUNoQjtBQUFBLEVBQ0YsUUFBUTtBQUFBLEVBQUM7QUFHVCxTQUFRLFlBQW9CLFNBQVMsTUFBTSxJQUFJO0FBQ2pEO0FBRU8sU0FBUyxxQkFBcUIsaUJBQWlCLE9BQXlCO0FBQzdFLFFBQU0sTUFBTSxRQUFRLGNBQWM7QUFDbEMsUUFBTSxPQUFPLFFBQVEsbUJBQW1CO0FBQ3hDLFFBQU0sVUFBVSxRQUFRLDJCQUEyQjtBQUNuRCxNQUFJLENBQUMsT0FBUSxDQUFDLFFBQVEsQ0FBQyxTQUFVO0FBQy9CLFVBQU0sSUFBSSxNQUFNLG1EQUFtRDtBQUFBLEVBQ3JFO0FBQ0EsUUFBTSxNQUFNLGtCQUFrQixVQUFVLFVBQVc7QUFDbkQsU0FBTyxhQUFhLEtBQUssS0FBSztBQUFBLElBQzVCLE1BQU0sRUFBRSxnQkFBZ0IsTUFBTTtBQUFBLEVBQ2hDLENBQUM7QUFDSDs7O0FDN0JBLElBQU8scUNBQVEsT0FBTyxRQUFpQjtBQUNyQyxNQUFJLElBQUksV0FBVztBQUFRLFdBQU8sSUFBSSxTQUFTLHNCQUFzQixFQUFFLFFBQVEsSUFBSSxDQUFDO0FBQ3BGLFFBQU0sTUFBTSxJQUFJLElBQUksSUFBSSxHQUFHO0FBQzNCLFFBQU0sUUFBUSxJQUFJLFNBQVMsTUFBTSxHQUFHO0FBQ3BDLFFBQU0sU0FBUyxNQUFNLENBQUMsS0FBSztBQUMzQixNQUFJO0FBQ0YsVUFBTSxPQUFPLE1BQU0sSUFBSSxLQUFLO0FBQzVCLFVBQU0sRUFBRSxVQUFVLElBQUksUUFBUSxDQUFDO0FBQy9CLFFBQUksQ0FBQyxVQUFVLE9BQU8sY0FBYyxVQUFVO0FBQzVDLGFBQU8sSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFLElBQUksT0FBTyxPQUFPLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxRQUFRLElBQUksQ0FBQztBQUFBLElBQzlGO0FBQ0EsVUFBTSxXQUFXLHFCQUFxQixJQUFJO0FBRTFDLFVBQU0sY0FBYyxNQUFNLFNBQVMsSUFBSSxLQUFLLElBQUksQ0FBQztBQUNqRCxVQUFNLEVBQUUsTUFBTSxJQUFJLE1BQU0sU0FDckIsS0FBSyxjQUFjLEVBQ25CLE9BQU8sRUFBRSxXQUFXLFNBQVMsUUFBUSxhQUFhLGtCQUFrQixPQUFPLENBQUM7QUFDL0UsUUFBSTtBQUFPLGFBQU8sSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFLElBQUksT0FBTyxPQUFPLE1BQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLElBQUksQ0FBQztBQUNuRyxXQUFPLElBQUksU0FBUyxLQUFLLFVBQVUsRUFBRSxJQUFJLE1BQU0sUUFBUSxXQUFXLFlBQVksQ0FBQyxHQUFHO0FBQUEsTUFDaEYsU0FBUyxFQUFFLGdCQUFnQixtQkFBbUI7QUFBQSxJQUNoRCxDQUFDO0FBQUEsRUFDSCxTQUFTLEdBQVE7QUFDZixXQUFPLElBQUksU0FBUyxLQUFLLFVBQVUsRUFBRSxJQUFJLE9BQU8sT0FBTyxHQUFHLFdBQVcsY0FBYyxDQUFDLEdBQUcsRUFBRSxRQUFRLElBQUksQ0FBQztBQUFBLEVBQ3hHO0FBQ0Y7QUFFTyxJQUFNLFNBQVM7QUFBQSxFQUNwQixNQUFNO0FBQ1I7IiwKICAibmFtZXMiOiBbXQp9Cg==
