
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// packages/shared/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
function readEnv(name) {
  try {
    if (typeof Netlify !== "undefined" && Netlify?.env?.get) {
      const v = Netlify.env.get(name);
      if (v)
        return v;
    }
  } catch {
  }
  return globalThis?.process?.env?.[name];
}
function createSupabaseClient(useServiceRole = false) {
  const url = readEnv("SUPABASE_URL");
  const anon = readEnv("SUPABASE_ANON_KEY");
  const service = readEnv("SUPABASE_SERVICE_ROLE_KEY");
  if (!url || !anon && !service) {
    throw new Error("Supabase env vars not set (SUPABASE_URL and key).");
  }
  const key = useServiceRole && service ? service : anon;
  return createClient(url, key, {
    auth: { persistSession: false }
  });
}

// apps/api/functions/users-profile-interests-put.ts
var users_profile_interests_put_default = async (req) => {
  if (req.method !== "PUT")
    return new Response("Method Not Allowed", { status: 405 });
  const url = new URL(req.url);
  const parts = url.pathname.split("/");
  const userId = parts[3] || "";
  try {
    const body = await req.json();
    const { city, interests } = body || {};
    if (!userId || typeof city !== "string" || !Array.isArray(interests)) {
      return new Response(JSON.stringify({ ok: false, error: "Invalid payload" }), { status: 400 });
    }
    const supabase = createSupabaseClient(true);
    const { error } = await supabase.from("users").update({ city, interests }).eq("id", userId);
    if (error) {
      return new Response(JSON.stringify({ ok: false, error: error.message }), { status: 500 });
    }
    return new Response(JSON.stringify({ ok: true, userId, city, interests }), {
      headers: { "Content-Type": "application/json" }
    });
  } catch (e) {
    return new Response(JSON.stringify({ ok: false, error: e?.message || "Bad Request" }), { status: 400 });
  }
};
var config = {
  path: "/api/users/:userId/profile/interests"
};
export {
  config,
  users_profile_interests_put_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGFja2FnZXMvc2hhcmVkL3N1cGFiYXNlQ2xpZW50LnRzIiwgImFwcHMvYXBpL2Z1bmN0aW9ucy91c2Vycy1wcm9maWxlLWludGVyZXN0cy1wdXQudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIFN1cGFiYXNlIGNsaWVudCBmYWN0b3J5XHJcbi8vIFJlYWRzIGVudiBmcm9tIE5ldGxpZnkgKE5ldGxpZnkuZW52KSBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBwcm9jZXNzLmVudlxyXG5cclxuaW1wb3J0IHR5cGUgeyBTdXBhYmFzZUNsaWVudCBhcyBTdXBhYmFzZUpzQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuXHJcbmZ1bmN0aW9uIHJlYWRFbnYobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICB0cnkge1xyXG4gICAgLy8gQHRzLWlnbm9yZSAtIE5ldGxpZnkgZ2xvYmFsIG1heSBleGlzdCBhdCBydW50aW1lXHJcbiAgICBpZiAodHlwZW9mIE5ldGxpZnkgIT09ICd1bmRlZmluZWQnICYmIE5ldGxpZnk/LmVudj8uZ2V0KSB7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgY29uc3QgdiA9IE5ldGxpZnkuZW52LmdldChuYW1lKTtcclxuICAgICAgaWYgKHYpIHJldHVybiB2IGFzIHN0cmluZztcclxuICAgIH1cclxuICB9IGNhdGNoIHt9XHJcbiAgLy8gRmFsbGJhY2tcclxuICAvLyBAdHMtaWdub3JlXHJcbiAgcmV0dXJuIChnbG9iYWxUaGlzIGFzIGFueSk/LnByb2Nlc3M/LmVudj8uW25hbWVdIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1cGFiYXNlQ2xpZW50KHVzZVNlcnZpY2VSb2xlID0gZmFsc2UpOiBTdXBhYmFzZUpzQ2xpZW50IHtcclxuICBjb25zdCB1cmwgPSByZWFkRW52KCdTVVBBQkFTRV9VUkwnKTtcclxuICBjb25zdCBhbm9uID0gcmVhZEVudignU1VQQUJBU0VfQU5PTl9LRVknKTtcclxuICBjb25zdCBzZXJ2aWNlID0gcmVhZEVudignU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWScpO1xyXG4gIGlmICghdXJsIHx8ICghYW5vbiAmJiAhc2VydmljZSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2UgZW52IHZhcnMgbm90IHNldCAoU1VQQUJBU0VfVVJMIGFuZCBrZXkpLicpO1xyXG4gIH1cclxuICBjb25zdCBrZXkgPSB1c2VTZXJ2aWNlUm9sZSAmJiBzZXJ2aWNlID8gc2VydmljZSA6IChhbm9uIGFzIHN0cmluZyk7XHJcbiAgcmV0dXJuIGNyZWF0ZUNsaWVudCh1cmwsIGtleSwge1xyXG4gICAgYXV0aDogeyBwZXJzaXN0U2Vzc2lvbjogZmFsc2UgfSxcclxuICB9KTtcclxufVxyXG4iLCAiaW1wb3J0IHsgY3JlYXRlU3VwYWJhc2VDbGllbnQgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9zaGFyZWQvc3VwYWJhc2VDbGllbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHJlcTogUmVxdWVzdCkgPT4ge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnUFVUJykgcmV0dXJuIG5ldyBSZXNwb25zZSgnTWV0aG9kIE5vdCBBbGxvd2VkJywgeyBzdGF0dXM6IDQwNSB9KTtcclxuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcS51cmwpO1xyXG4gIGNvbnN0IHBhcnRzID0gdXJsLnBhdGhuYW1lLnNwbGl0KCcvJyk7XHJcbiAgY29uc3QgdXNlcklkID0gcGFydHNbM10gfHwgJyc7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xyXG4gICAgY29uc3QgeyBjaXR5LCBpbnRlcmVzdHMgfSA9IGJvZHkgfHwge307XHJcbiAgICBpZiAoIXVzZXJJZCB8fCB0eXBlb2YgY2l0eSAhPT0gJ3N0cmluZycgfHwgIUFycmF5LmlzQXJyYXkoaW50ZXJlc3RzKSkge1xyXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgcGF5bG9hZCcgfSksIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVN1cGFiYXNlQ2xpZW50KHRydWUpO1xyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3VzZXJzJylcclxuICAgICAgLnVwZGF0ZSh7IGNpdHksIGludGVyZXN0cyB9KVxyXG4gICAgICAuZXEoJ2lkJywgdXNlcklkKTtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgb2s6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9KSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogdHJ1ZSwgdXNlcklkLCBjaXR5LCBpbnRlcmVzdHMgfSksIHtcclxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoeyBvazogZmFsc2UsIGVycm9yOiBlPy5tZXNzYWdlIHx8ICdCYWQgUmVxdWVzdCcgfSksIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBwYXRoOiAnL2FwaS91c2Vycy86dXNlcklkL3Byb2ZpbGUvaW50ZXJlc3RzJyxcclxufTtcclxuIl0sCiAg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
