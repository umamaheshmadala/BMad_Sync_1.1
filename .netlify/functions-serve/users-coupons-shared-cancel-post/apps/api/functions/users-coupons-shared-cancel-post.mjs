
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// packages/shared/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
function readEnv(name) {
  try {
    if (typeof Netlify !== "undefined" && Netlify?.env?.get) {
      const v = Netlify.env.get(name);
      if (v)
        return v;
    }
  } catch {
  }
  return globalThis?.process?.env?.[name];
}
function createSupabaseClient(useServiceRole = false) {
  const url = readEnv("SUPABASE_URL");
  const anon = readEnv("SUPABASE_ANON_KEY");
  const service = readEnv("SUPABASE_SERVICE_ROLE_KEY");
  if (!url || !anon && !service) {
    throw new Error("Supabase env vars not set (SUPABASE_URL and key).");
  }
  const key = useServiceRole && service ? service : anon;
  return createClient(url, key, {
    auth: { persistSession: false }
  });
}

// apps/api/functions/users-coupons-shared-cancel-post.ts
var users_coupons_shared_cancel_post_default = async (req) => {
  if (req.method !== "POST")
    return new Response("Method Not Allowed", { status: 405 });
  const url = new URL(req.url);
  const parts = url.pathname.split("/");
  const userId = parts[3] || "";
  const shareId = parts[6] || "";
  if (!userId || !shareId)
    return new Response(JSON.stringify({ ok: false, error: "Invalid path" }), { status: 400 });
  const supabase = createSupabaseClient(true);
  const { data: share, error: shareErr } = await supabase.from("coupon_shares").select("id, original_user_coupon_id, sharer_user_id, receiver_user_id, shared_coupon_instance_id").eq("id", shareId).single();
  if (shareErr || !share)
    return new Response(JSON.stringify({ ok: false, error: "Share not found" }), { status: 404 });
  if (share.sharer_user_id !== userId)
    return new Response(JSON.stringify({ ok: false, error: "Not share owner" }), { status: 403 });
  const { data: sharedUC, error: ucErr } = await supabase.from("user_coupons").select("id, is_redeemed").eq("id", share.shared_coupon_instance_id).maybeSingle();
  if (ucErr)
    return new Response(JSON.stringify({ ok: false, error: ucErr.message }), { status: 500 });
  if (sharedUC && sharedUC.is_redeemed) {
    return new Response(JSON.stringify({ ok: false, error: "Already redeemed; cannot cancel" }), { status: 409 });
  }
  if (sharedUC) {
    const { error: delErr } = await supabase.from("user_coupons").delete().eq("id", share.shared_coupon_instance_id);
    if (delErr) {
    }
  }
  const { data: originalUC } = await supabase.from("user_coupons").select("transfer_count").eq("id", share.original_user_coupon_id).single();
  const newCount = Math.max(0, (originalUC?.transfer_count || 0) - 1);
  const { error: updErr } = await supabase.from("user_coupons").update({ current_owner_id: userId, transfer_count: newCount }).eq("id", share.original_user_coupon_id);
  if (updErr)
    return new Response(JSON.stringify({ ok: false, error: updErr.message }), { status: 500 });
  const { error: delShareErr } = await supabase.from("coupon_shares").delete().eq("id", shareId);
  if (delShareErr) {
  }
  return new Response(JSON.stringify({ ok: true }), { headers: { "Content-Type": "application/json" } });
};
var config = {
  path: "/api/users/:userId/coupons/shared/:shareId/cancel"
};
export {
  config,
  users_coupons_shared_cancel_post_default as default
};
//# sourceMappingURL=data:application/json;base64,
