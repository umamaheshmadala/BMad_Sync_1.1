
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// packages/shared/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
function readEnv(name) {
  try {
    if (typeof Netlify !== "undefined" && Netlify?.env?.get) {
      const v = Netlify.env.get(name);
      if (v)
        return v;
    }
  } catch {
  }
  return globalThis?.process?.env?.[name];
}
function createSupabaseClient(useServiceRole = false) {
  const url = readEnv("SUPABASE_URL");
  const anon = readEnv("SUPABASE_ANON_KEY");
  const service = readEnv("SUPABASE_SERVICE_ROLE_KEY");
  if (!url || !anon && !service) {
    throw new Error("Supabase env vars not set (SUPABASE_URL and key).");
  }
  const key = useServiceRole && service ? service : anon;
  return createClient(url, key, {
    auth: { persistSession: false }
  });
}

// packages/shared/auth.ts
function decodeBase64Url(input) {
  input = input.replace(/-/g, "+").replace(/_/g, "/");
  const pad = input.length % 4;
  if (pad)
    input = input + "=".repeat(4 - pad);
  if (typeof atob !== "undefined")
    return atob(input);
  return Buffer.from(input, "base64").toString("binary");
}
function parseJwtPayload(token) {
  const parts = token.split(".");
  if (parts.length < 2)
    return null;
  try {
    const json = decodeBase64Url(parts[1]);
    return JSON.parse(json);
  } catch {
    return null;
  }
}
function getUserIdFromRequest(req) {
  const auth = req.headers.get("authorization") || req.headers.get("Authorization");
  if (!auth || !auth.toLowerCase().startsWith("bearer "))
    return null;
  const token = auth.slice(7).trim();
  const payload = parseJwtPayload(token);
  const sub = payload?.sub || payload?.user_id || null;
  return typeof sub === "string" ? sub : null;
}

// apps/api/functions/business-storefront.ts
var business_storefront_default = async (req) => {
  const method = req.method || "GET";
  const supabase = createSupabaseClient(true);
  const ownerUserId = getUserIdFromRequest(req);
  let businessId = "";
  if (ownerUserId) {
    const { data: biz, error } = await supabase.from("businesses").select("id").eq("owner_user_id", ownerUserId).limit(1).maybeSingle();
    if (!error && biz?.id)
      businessId = biz.id;
  }
  if (!businessId)
    businessId = req.headers.get("x-business-id") || "";
  if (!businessId)
    return new Response(JSON.stringify({ ok: false, error: "Missing business context" }), { status: 400 });
  if (method === "POST") {
    try {
      const body = await req.json();
      const { description, theme, is_open } = body || {};
      const { data: existing } = await supabase.from("storefronts").select("id").eq("business_id", businessId).maybeSingle();
      if (existing?.id) {
        const { error } = await supabase.from("storefronts").update({ description, theme, is_open: !!is_open }).eq("id", existing.id);
        if (error)
          return new Response(JSON.stringify({ ok: false, error: error.message }), { status: 500 });
      } else {
        const { error } = await supabase.from("storefronts").insert({ business_id: businessId, description, theme, is_open: !!is_open });
        if (error)
          return new Response(JSON.stringify({ ok: false, error: error.message }), { status: 500 });
      }
      return new Response(JSON.stringify({ ok: true }), { headers: { "Content-Type": "application/json" } });
    } catch (e) {
      return new Response(JSON.stringify({ ok: false, error: e?.message || "Bad Request" }), { status: 400 });
    }
  }
  if (method === "GET") {
    const { data, error } = await supabase.from("storefronts").select("*").eq("business_id", businessId).single();
    if (error && error.code !== "PGRST116") {
      return new Response(JSON.stringify({ ok: false, error: error.message }), { status: 500 });
    }
    return new Response(JSON.stringify({ ok: true, storefront: data || null }), { headers: { "Content-Type": "application/json" } });
  }
  return new Response("Method Not Allowed", { status: 405 });
};
var config = {
  path: "/api/business/storefront"
};
export {
  config,
  business_storefront_default as default
};
//# sourceMappingURL=data:application/json;base64,
